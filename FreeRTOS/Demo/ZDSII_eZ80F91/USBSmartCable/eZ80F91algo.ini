
;-------	ZDL/DTL Read/Write Register Descritpions------------------
;
;   ZDI Regs			DTL Regs      Descriptions
;   --------			--------      --------------------
;   ZDI_RD_L			R10	      Read Memory Low Byte Register
;   ZDI_RD_H			R11	      Read Memory High Byte Register
;   ZDI_RD_U			R12           Read Memory Upper Byte Register
;   ZDI_WR_L			R13           Write Memory Low Byte Register
;   ZDI_WR_H			R14           Write Memory High Byte Register
;   ZDI_WR_U			R15           Write Memory Upper Byte Register
;   ZDI_RW_CTRL			R16           R/W Control Register
;   
;------	Command Code of ZDI_RW_CTRL(R16) to access eZ80 registers-------
; R16 RD/WR Command     eZ80 Registers 	     R16 RD/WR Command    eZ80 Registers
; -----------------     ---------------      -----------------    --------------
;       00/80           MBASE, F, A              06/86            SP(SPL or SPS)
;	01/81           BC		         07/87            PC
;	02/82           DE		         08               Set ADL/reserved
;	03/83           HL		         09               Reset ADL/Reserved
;	04/84           IX		         0A               Exx (AF-AF',etc..)
;	05/85           IY					 

;--------------------------------------------------------------------------------------
;   EventConfiguration Register Descriptions
;--------------------------------------------------------------------------------------
;
; RF0= Event activation                  RF8= Target Not Responding Event Address
; RF1= Mask operation                    RF9= Target Not Responding mask
; RF2= Target Event Address              RFA= Led Configuration
; RF3= Target Event mask      	          RFB= ZDI Clock Setting
; RF4= Target Break Event address        RFC= Target Halt Mode Event Address
; RF5= Target Break Event mask           RFD= Target Halt Mode Mask
; RF6= Target IO Request Event address   RFE= Reserved
; RF7= Target IO Request Evetn mask      RFF= Reserved
; RED= Target type(01:eZ80, 02:Encore...)
;
; RF0 Bit Information:
; -------------------
; Bit7-4= Reserved
; Bit 3= activate/deactivate target not respoding event
; Bit 2= activate/deactivate target IO request event
; Bit 1= activate/deactivate target break event
; Bit 0= activate/deactivate target reset event
;
; RF1 Bit information:
;---------------------
; Bit7-4= Reserved
; Bit 3= Target not responding event operation
; Bit 2= Target IO Request Event operation
; Bit 1= Target break event operation
; Bit 0= Target reset event Operation

;===============================================================================
; Target Information (ID, Revision)
;===============================================================================
[DEVICE_ID_REV]
Algo=.[]=R00[]=R01[]=R02$


;===============================================================================
;	GET INDIVIDUAL REGISTER(PAIR)
;===============================================================================
;The Number followed GET_REG/SET_REG is impportant. The EID/ICEDLL refers to
;this order.

[GET_REG0]
;A
Algo=R16=00.[]=R10$

[GET_REG1]
;F
Algo=R16=00.[]=R11$

[GET_REG2]
;BC
Algo=V00=(R03&10)?08:09R16=08R16=01.[]=R10[]=R11[]=R12R16=V00$

[GET_REG3]
;DE
Algo=V00=(R03&10)?08:09R16=08R16=02.[]=R10[]=R11[]=R12R16=V00$

[GET_REG4]
;HL
Algo=V00=(R03&10)?08:09R16=08R16=03.[]=R10[]=R11[]=R12R16=V00$

[GET_REG5]
;A'
Algo=R16=0AR16=00.[]=R10R16=0A$

[GET_REG6]
;F'
Algo=R16=0AR16=00.[]=R11R16=0A$

[GET_REG7]
;BC'
Algo=V00=(R03&10)?08:09R16=08R16=0AR16=01.[]=R10[]=R11[]=R12R16=0AR16=V00$

[GET_REG8]
;DE'
Algo=V00=(R03&10)?08:09R16=08R16=0AR16=02.[]=R10[]=R11[]=R12R16=0AR16=V00$

[GET_REG9]
;HL'
Algo=V00=(R03&10)?08:09R16=08R16=0AR16=03.[]=R10[]=R11[]=R12R16=0AR16=V00$

[GET_REG10]
;IX
Algo=V00=(R03&10)?08:09R16=08R16=04.[]=R10[]=R11[]=R12R16=V00$

[GET_REG11]
;IY
Algo=V00=(R03&10)?08:09R16=08R16=05.[]=R10[]=R11[]=R12R16=V00$


[GET_REG12]
;I
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=R16=03.[]=R10[]=R11[]=R12
Algo1c=R16=07[]=R10[]=R11[]=R12
Algo1d=R24=D7R25=EDR16=03V01=(R11<<8)|R10
Algo1e=R15=[2]R14=[1]R13=[0]R16=83
Algo1f=R15=[5]R14=[4]R13=[3]R16=87
Algo1g=.[]=V01[]=V01>>8
Algo1h=R16=V00$

[GET_REG13]
;R
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=R16=00.[]=R10[]=R11[]=R12
Algo1c=R16=07[]=R10[]=R11[]=R12
Algo1d=R24=5FR25=EDR16=00V01=R10
Algo1e=R15=[2]R14=[1]R13=[0]R16=80
Algo1f=R15=[5]R14=[4]R13=[3]R16=87
Algo1g=.[]=V01
Algo1h=R16=V00$

[GET_REG14]
;ADL
Algo=.[]=(R03&10)>>4$

[GET_REG15]
;MADL
Algo=.[]=(R03&8)>>3$

[GET_REG16]
;MBASE
Algo=V00=(R03&10)?08:09R16=08R16=00.[]=R12R16=V00$

[GET_REG17]
;IEF1
Algo=.[]=(R03&4)>>2$

[GET_REG18]
;IEF2
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=R16=00.[]=R10[]=R11[]=R12
Algo1c=R16=07[]=R10[]=R11[]=R12
Algo1d=R24=5FR25=EDR16=00V01=R11
Algo1e=R15=[2]R14=[1]R13=[0]R16=80
Algo1f=R15=[5]R14=[4]R13=[3]R16=87
Algo1g=.[]=(V01&04)>>2
Algo1h=R16=V00$

[GET_REG19]
;SPL
Algo=V00=(R03&10)?08:09R16=08R16=06.[]=R10[]=R11[]=R12R16=V00$

[GET_REG20]
;SPS
Algo=V01=(R03&10)R16=09R16=06[]=R10[]=R11R16=V01?08:09$

[GET_REG21]
;PC
Algo=V00=(R03&10)?08:09R16=08R16=07.[]=R10[]=R11[]=R12
Algo1={:\(V00==08)R16=00[2]=R12\1}R16=V00$

;===============================================================================
;	GET ALL REGISTERS
;===============================================================================
[GET_ALL_REGS]
;save R03 to V07
Algoa=V07=R03

;Set ADL to 1
Algob=R16=08

;Get all registers in the following order:
;AF
Algo=.R16=00[]=R10[]=R11

;BC,DE,HL
Algo1=V00=1{3:R16=V00++[]=R10[]=R11[]=R12}

;AF'
Algo2=R16=0AR16=00[]=R10[]=R11R16=0A

;BC',DE',HL'
Algo3=V00=1{3:R16=0AR16=V00++[]=R10[]=R11[]=R12R16=0A}

;IX,IY
Algo4=V00=4{2:R16=V00++[]=R10[]=R11[]=R12}

;Save PC
Algo5=R16=07V01=R10V02=R11V03=R12R16=00V06=R12

;I: "ld HL, I"
Algo6=R24=D7R25=EDR16=03[]=R10[]=R11
Algo6a=R15=[@-14]R14=[@-15]R13=[@-16]R16=83

;R (use "LD A, R")
Algo7=R24=5FR25=EDR16=00[]=R10
;Save Flag to get IEF2 value.
Algo7a=V05=R11

;ADL
Algo8=V00=R03[]=(V07&10)>>4

;MADL
Algo9=[]=(V07&8)>>3

;MBASE
Algo10=[]=V06

;IEF1
Algo11=[]=(V07&4)>>2

;IEF2
Algo12=[]=(V05&4)>>2

;SPL
Algo13=R16=6[]=R10[]=R11[]=R12R16=V07?08:09

;SPS
Algo14=R16=09R16=06[]=R10[]=R11

;PC
Algo15=[]=V01[]=V02[]=V03{:\(V07&10)[@-1]=V06\1}


;Restore PC, AF since they changed upon reading I and R
Algo16=R16=(V07&10)?08:09R15=V03R14=V02R13=V01R16=87R16=16V00=R12R15=V00R14=[1]R13=[0]R16=80$

;===============================================================================
;	SET REGISTER
;===============================================================================

[SET_REG0]
;A
Algo=R16=00.[]=R11[]=R12
Algo1=R15=[1]R13=%02XR14=[0]R16=80

[SET_REG1]
;F
Algo=R16=00.[]=R10[]=R12
Algo1=R15=[1]R13=[0]R14=%02XR16=80

[SET_REG2]
;BC
Algo=V00=(R03&10)?08:09R16=08R15=%02XR14=%02XR13=%02XR16=81R16=V00

[SET_REG3]
;DE
Algo=V00=(R03&10)?08:09R16=08R15=%02XR14=%02XR13=%02XR16=82R16=V00

[SET_REG4]
;HL
Algo=V00=(R03&10)?08:09R16=08R15=%02XR14=%02XR13=%02XR16=83R16=V00

[SET_REG5]
;A'
Algo=R16=0AR16=00.[]=R11[]=R12R15=[1]R13=%02XR14=[0]R16=80R16=0A


[SET_REG6]
;F'
Algo=R16=0AR16=00.[]=R10[]=R12R15=[1]R13=[0]R14=%02XR16=80R16=0A

[SET_REG7]
;BC'
Algo=V00=(R03&10)?08:09R16=08R16=0AR15=%02XR14=%02XR13=%02XR16=81R16=0AR16=V00

[SET_REG8]
;DE'
Algo=V00=(R03&10)?08:09R16=08R16=0AR15=%02XR14=%02XR13=%02XR16=82R16=0AR16=V00

[SET_REG9]
;HL'
Algo=V00=(R03&10)?08:09R16=08R16=0AR15=%02XR14=%02XR13=%02XR16=83R16=0AR16=V00

[SET_REG10]
;IX
Algo=V00=(R03&10)?08:09R16=08R15=%02XR14=%02XR13=%02XR16=84R16=V00

[SET_REG11]
;IY
Algo=V00=(R03&10)?08:09R16=08R15=%02XR14=%02XR13=%02XR16=85R16=V00

[SET_REG12]
;I ; ld I,HL
Algo1a=R16=03.[]=R10[]=R11[]=R12
Algo1b=R16=07[]=R10[]=R11[]=R12
Algo1c=R14=%02XR13=%02XR16=83
Algo1d=R24=C7R25=ED
Algo1e=R15=[2]R14=[1]R13=[0]R16=83
Algo1f=R15=[5]R14=[4]R13=[3]R16=87

[SET_REG13]
; ld A, m, ld R, A
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=R16=00.[]=R10[]=R11[]=R12
Algo1c=R16=07[]=R10[]=R11[]=R12
Algo1d=R24=%02XR25=3ER24=4FR25=ED
Algo1e=R15=[2]R14=[1]R13=[0]R16=80
Algo1f=R15=[5]R14=[4]R13=[3]R16=87
Algo1g=R16=V00

[SET_REG14]
;ADL
Algo=R16=(%01X&01)?08:09

[SET_REG15]
;MADL, uses STMIX and RMIX to set/reset MADL
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=.R16=07[]=R10[]=R11[]=R12
Algo1c=R24=(%01X&01)?7D:7ER25=ED
Algo1d=R15=[2]R14=[1]R13=[0]R16=87
Algo1e=R16=V00

[SET_REG16]
;MBASE
; ld A, m, ld MB, A
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=R16=00.[]=R10[]=R11[]=R12
Algo1c=R16=07[]=R10[]=R11[]=R12
Algo1d=R24=%02XR25=3ER24=6DR25=ED
Algo1e=R15=[2]R14=[1]R13=[0]R16=80
Algo1f=R15=[5]R14=[4]R13=[3]R16=87
Algo1g=R16=V00

[SET_REG17]
;IEF1
Algo1a=.R16=07[]=R10[]=R11[]=R12
Algo1b=R25=(%01X&01)? FB: F3
Algo1c=R15=[2]R14=[1]R13=[0]R16=87

[SET_REG18]
;IEF2
Algo1a=V00=(R03&10)?08:09R16=08
Algo1b=.R16=07[]=R10[]=R11[]=R12
Algo1c=R25=(%01X&01)? FB: F3
Algo1d=R15=[2]R14=[1]R13=[0]R16=87
Algo1e=R16=V00

[SET_REG19]
;SPL
Algo=V00=(R03&10)?08:09R16=08R15=%02XR14=%02XR13=%02XR16=86R16=V00

[SET_REG20]
;SPS
Algo=V01=(R03&10)>>4R16=09R14=%02XR13=%02XR16=86R16=V01?08:09

[SET_REG21]
;PC
Algo=R15=%02XR14=%02XR13=%02XR16=87

;===============================================================================
; GET/SET MEMORY
; 
; MEM1= CODEMEM		MEM2= EXTIOMEM 		MEM3= INTIOMEM
; MEM4= FLASH INFO PAGE
;===============================================================================
[GET_MEM1]
;Algo0=RFA=01
Algo1=.[0:%X]=R20
;Save PC to V01
Algo2=R16=07V01=R10|(R11<<8)|(R12<<10)
;Decrement V01
Algo3=V01=V01-3
;Set New PC for next block
Algo4=R13=V01R14=V01>>8R15=V01>>10R16=87$
;Algo5=RFA=00$

[GET_MEM2]
Algo0=RFA=01
;BC=StartAddress
Algo1a=V00=R03R16=08.R15=%02XR14=%02XR13=%02XR16=81
;Loop Starts
Algo1b={
;Repeat Count
Algo1c=%X:
;in a, (C)
Algo1d=R24=78R25=ED
;[]=a
Algo1e=R16=0[]=R10
;inc BC
Algo1f=R25=03
;Loop Ends
Algo1g=}
Algo2=RFA=00R16=(V00&10)?08:09$


[GET_MEM3]
;Save PC, AF
;Algo0=RFA=01
Algo1= V00=R03R16=08R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=R16=00V06=R10|(R11<<8)|(R12<<10)
;read intio registers
Algo3=.V01=%02X{%X:R23=V01++R24=38R25=EDR16=0[]=R10}

; Retore PC, AF
Algo4=R13=V07R14=V07>>8R15=V07>>10R16=87
Algo5=R13=V06R14=V06>>8R15=V06>>10R16=80R16=(V00&10)?08:09$

[GET_MEM4]
;Save PC, AF
;Algo0=RFA=01
Algo1= V00=R03R16=08R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=R16=00V06=R10|(R11<<8)|(R12<<10)
;save FLASH_PAGE, FLASH_ROW, FLASH_COLUMN to V01
Algo3=V02=FC.{3:R23=V02++R24=38R25=EDR16=0[]=R10}V01=[0]|([1]<<8)|([2]<<10)
;Set FLASH_PAGE=80, FLASH_ROW=upperbyte-address, FLASH_COLUMN=lowerbyte-address 
Algo4=.V02=%X[]=80[]=V02>>8[]=V02V05=FCV03=00{3:R24=[V03++]R25=3ER23=V05++R24=39R25=ED}
Algo5=.{%X:R23=F6R24=38R25=EDR16=0[]=R10}

;Resetore FLASH_PAGE, FLASH_ROW, FLASH_COLUMN
Algo6a=R24=V01R25=3ER23=FCR24=39R25=ED
Algo6b=R24=V01>>8R25=3ER23=FDR24=39R25=ED
Algo6c=R24=V01>>10R25=3ER23=FER24=39R25=ED

; Retore PC, AF
Algo7=R13=V07R14=V07>>8R15=V07>>10R16=87
Algo8=R13=V06R14=V06>>8R15=V06>>10R16=80R16=(V00&10)?08:09$

;----------------------------------
[SET_MEM1]
Algo0=RFA=01
Algo1=.[]=%X:#BR30=[0:@]
Algo2=RFA=00

[SET_MEM2]
Algo1=.[]=%X:#B
;BC=StartAddress
Algo2=V00=R03R16=08R15=%02XR14=%02XR13=%02XR16=81
;V01=Buffer Index
Algo3=V01=0
;Loop starts
Algo4a={
;Loop Counter
Algo4b=%X:
;ld a, []
Algo4c=R13=[V01++]R16=80
;out(C), a
Algo4d=R24=79R25=ED
;inc bc
Algo4e=R25=03
;Loop ends
Algo4f=}R16=(V00&10)?08:09

[SET_MEM3]
;Algo0=RFA=01
;Save PC, AF
Algo1= V00=R03R16=08R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=R16=00V06=R10|(R11<<8)|(R12<<10)

;write intio
Algo3=.[]=%X:#B
Algo4=V01=0V02=%X{@:R24=[V01++]R25=3ER23=V02++R24=39R25=ED}

;Retore PC, AF
Algo5=R13=V07R14=V07>>8R15=V07>>10R16=87
Algo6=R13=V06R14=V06>>8R15=V06>>10R16=80R16=(V00&10)?08:09

;===============================================================================
;	STOP TARGET
;===============================================================================

[STOP]
;Break next instruction
Algo1=R10=80
;Save Mask
Algo2=V04=V04|80
;Restore breakpoint
Algo3=R10=V04
Algo4=RFA=00

;===============================================================================
;	HALT/SLEEP POLLING
;===============================================================================
[HALT_SLP]
Algo1=.[]=(R03&20)$

;===============================================================================
;    TARGET STATUS
;===============================================================================
[TARGET_STATUS]
Algo1=.[]=R03$


;===============================================================================
;	RESUME TARGET
;===============================================================================

[GO_FROM_PC]
;Activate Breakevent
Algo1=RFA=01

;Release wait, but maintain breakpoint control
Algo2=R10=(V04&7F)|01 _5

;Enable Break Control
Algo3=RF0=RF0|02



;===============================================================================
;	STEP TARGET
;===============================================================================

[STEP_ONE]
;Set Releasewait and breaknext
Algo1=R10=81
Algo2=RFA=01
;Restore orginal status
Algo3=R10=V04
Algo4=RFA=0

[STEPN]
Algo1= RFA=01
Algo2=V01=%XV02=%X
Algo3={:R16=07V00=R10|(R11<<8)|(R12<<10)R10=81R16=07V03=R10|(R11<<8)|(R12<<10)\
Algo3a=(R03&20||V03<=V01||V03>=V02||V03==V00)}R10=V04
Algo4=RFA=0

;===============================================================================
;	RESET
;===============================================================================
[HARD RESET]
;Disable break/halt/reset Events
Algo1=RF0=28

;Hard Reset
Algo2=R11=80

;ZDI Break
Algo3=R10=V04|80

;Disable Interrupt
Algo4=R25=F3

;Activate Reset/TargetNotRespond/Halt Events/power loss
Algo5=RF0=39

[SOFT RESET]

;Disable break/halt/reset Events
Algo1=RF0=28

;ZDI Break
Algo2=R10=V04|80

;Disable Interrupt
Algo3=R25=F3

;Activate Reset/TargetNotRespond/Halt Events/power loss
Algo4=RF0=39



;===============================================================================
;	Breakpoints
;===============================================================================
[POLL_FOR_BREAKPOINT]
Algo=.[]=R03[0]=[0]&80$

[BRKCLR_ONE]
;input= break id(0,1,2,3,)
Algo1=V04=V04&~(08<<%02X)R10=V04

[BRKCLR_ALL]
Algo1=V04=V04&87R10=V04

[BRKSET_ID0]
;Break Address Match 0(upper, high, low)
Algo1=R02=%XR01=%XR00=%X
;Save break flag
Algo2=V04=V04|08


[BRKSET_ID1]
;Break Address Match 1
Algo1=R06=%XR05=%XR04=%X
;Save break flag
Algo2=V04=V04|10

[BRKSET_ID2]
;Break Address Match 2
Algo1=R0A=%XR09=%XR08=%X
;Save break flag
Algo2=V04=V04|20

[BRKSET_ID3]
;Break Address Match 3
Algo1=R0E=%XR0D=%XR0C=%X
;Save break flag
Algo2=V04=V04|40

[BREAKEVENT_QUERRY]
Algo1=.[]=R03&80$

[POLL_FOR_EVENTS]
;return ZDI status for halt/event detection
Algo=.[]=R03&A0$

;===============================================================================
;	Initialize Target
;===============================================================================

[INIT_TARGET]

;Set ZDI Clock Frequency
;Algo0=RED=%02XRFB=%XRFA=00
Algo0=RED=%02XRED=01RFB=%XRFA=00

;Disable target Event
Algo1=RF0=0

;Set Reset Event Address and mask. Bit 6 of R03 is for RESET_PEND/HALT
Algo2=RF2=03RF3=40

;Set Break Event Address and Mask. Bit 7 of R03 is for ZDI_ACTIVE or break
Algo3=RF4=03RF5=80

;Set Halt Event Address and Mask. Bit 6 of R03 is for RESET_PEND/HALT
Algo4=RFC=03RFD=20

;Hard Reset Target
Algo5=R11=80V00=0{A:_100V00=R03\(V00!=FF)}

;WaitControl Mask=break.
Algo6=V04=80

;Stop Target
Algo7=R10=V04

; return 0= success, 1= target running, 2= halt_slp, 3= reset/not responding
Algo8=V00=R03V01=!(V00>>7).[]=(V00!=FF)?((V00&20)?2:V01):3$

[SELFTEST]
Algo1=R16=08
Algo2=R15=00R13=55R14=55R16=80
Algo3=R15=55R14=55R13=55R16=81
Algo4=R15=55R14=55R13=55R16=82
Algo5=R15=55R14=55R13=55R16=83
Algo6=R15=55R14=55R13=55R16=84
Algo7=R15=55R14=55R13=55R16=85
Algo8=R15=55R14=55R13=55R16=86
Algo9=R16=00.[]=R11[]=R10
Algo10=R16=01[]=R10[]=R11[]=R12
Algo11=R16=02[]=R10[]=R11[]=R12
Algo12=R16=03[]=R10[]=R11[]=R12
Algo13=R16=04[]=R10[]=R11[]=R12
Algo14=R16=05[]=R10[]=R11[]=R12
Algo15=R16=06[]=R10[]=R11[]=R12
Alog16=V01=0V02=@{@:\([V01++]!=55)}.[]=(V01==V02)$


;===============================================================================
;	Initial settings
;===============================================================================
[Initial_Setting]
;Chip Select Setup
Algo1=.[]=%X:#B1
Algo2=R16=08V01=0V02=A8{@:R24=[V01++]R25=3ER23=V02++R24=39R25=ED}

;Busmode control
Algo2a=.[]=%X:#B2V01=0V02=F0{@:R24=[V01++]R25=3ER23=V02++R24=39R25=ED}

;Set Internal RAM
Algo3= %S

;Disable Flash
;Algo4=R24=0R25=3ER23=F8R24=39R25=ED

;Set Internal Flash
Algo4= %S

;Save ADL value to V01, set it later
Algo5=V01=(%01X&01)

;Set PC
;Set MBASE if ADL= 0
Algo6a=V02=%X{:\V01R24=V02R25=3ER24=6DR25=ED\1}
Algo6b=R15=V02R14=%XR13=%XR16=87

;Set SPL
Algo7=R15=%XR14=%XR13=%XR16=86

;Set SPS
Algo8=R16=09R14=%02XR13=%02XR16=86R16=V01

;Set ADL
Algo9=R16=V01?08:09

Algo10=R10=V04&87

;===============================================================================
;	Internal RAM
;===============================================================================
[SET_INTERNAL_RAM]
;Set RAM_CTL
Algo1=R24=%XR25=3ER23=B4R24=39R25=ED

;Set RAM_ADDR_U
Algo2=R24=%XR25=3ER23=B5R24=39R25=ED

;===============================================================================
;	Internal FLASH Acess Configuration
;===============================================================================
[SET_INTERNAL_FLASH]
;Enable/Disable internal Flash
Algo1=R24=(%X<<5)|(%X<<3)R25=3ER23=F8R24=39R25=ED

;Set FLASH_ADDR_U
Algo2=R24=%XR25=3ER23=F7R24=39R25=ED

[SET_INTERNAL_FLASH_WAITSTATES]
Algo1=R23=F8R24=38R25=EDR16=0V01=R10R24=(%X<<5)|(V01&1F)R25=3ER23=F8R24=39R25=ED

;===============================================================================
; INTERNAL FLASH LOADER
;===============================================================================
[CONFIGURE_FLASH_INTRAM]
;Make sure ADL= 1
Algo1=R16=08

;Set Static RAM from FFE000-FFFFFF
Algo3=R24=80R25=3ER23=B4R24=39R25=EDR24=FFR25=3ER23=B5R24=39R25=ED

;-----------------------------------
[SET_INT_FLASH_WRITE_LOADER]
;SET PC=RAMStart
Algo3=R15=%02XR14=%02XR13=%02XR16=87

;Load loader, "DI LDIR NOP NOP NOP NOP ", 7 bytes
Algo4=.[]="F3EDB000000000"R30=[0:@]

;-----------------------------------
[ERASE_INT_FLASH]
;Erase page algo/loader:
;             Set d=pageCount, b= pagevalue, c= cmdvalue
;             
;Address     Opcodes:           Memmonics
;0x0         F3                    di
;                                again:            
;0x1         78                    ld a, b         
;0x2         ED39pageaddr          out0 (pageaddr), a   
;0x5         79                    ld a, c         
;0x6         ED39cmdaddr           out0 (cmdaddr),a    
;                                wait:             
;0x9         ED38verifyaddr        in0 a, (verifyaddr)  
;0xC         E6verifymask          and a, verifymask   
;0xE         FEverifyvalue         cp a, verifyvalue
;0x10        20F7                  jr nz, wait     
;0x12        04                    inc b           
;0x13        15                    dec d           
;0x14        20EB                  jr nz, again    
;0x16        00                    nop
;0x17        00                    nop
;
;Input Order: pageCount, pagevalue, erasecmd, pageaddr, cmdaddr, verifyaddr
;             verifymask, verifyvalue, RAMstart

;d= pageCount
Algo1=R14=%02XR16=82

;b=pagevalue, c=erasecmd
Algo2=R14=%02XR13=%02XR16=81

;Fill buffer with loader codes
Algo3a=.[]="F378ED39"
;pageaddr
Algo3b=[]=%02X
Algo3c=[]="79ED39"
;cmdaddr
Algo3d=[]=%02X
Algo3e=[]="ED38"
;verifyaddr
Algo3f=[]=%02X
Algo3g=[]=E6
;verifymask
Algo3h=[]=%02X
Algo3i=[]=FE
;verifyvalue
Algo3j=[]=%02X
Algo3k=[]="20F7041520EB0000"

;write buffer to RAM
Algo4a=V00=%XR15=V00>>10R14=V00>>8R13=V00R16=87
Algo4b=R30=[0:@]

;Set Breakpoint at byte RAMStart+17H
Algo5a=V00=V00+17R02=V00>>10R01=V00>>8R00=V00
Algo5b=V04=V04|08

;Set PC= RAMStart
Algo6=V00=V00-17R15=V00>>10R14=V00>>8R13=V00R16=87

;Execute erage page loader
Algo7=RFA=01R10=(V04&7F)|01

;Check for breakpoint and return
Algo8=V07=0{:_1V07=V07+1\(R03&80)\(V07==800)}RFA=0.[]=(V07==800)?0:1$


;-----------------------------------
[WRITE_INT_FLASH_BLOCK_FROM_RAM]

Algo0a=V01=%X
Algo0b=.[]=V01>>10[]=V01>>8[]=V01
Algo0c=V01=V01+5[]=V01>>10[]=V01>>8[]=V01
Algo0d=V01=V01+2[]=V01>>10[]=V01>>8[]=V01

;Set Breakpoint at byte 7
Algo1a=R02=[3]R01=[4]R00=[5]
Algo1b=V04=V04|08

;Set Data to staticRAM
Algo1c=[]=%X:#B

;V01=Size of available SRAM,   V02= Buffer startIndex
;V03=BC, transfer block size,  V05= hold remaining block size
;V06=Flash Address
Algo1d=V01=%X-7V02=9V05=@-9V06=%X

;Set Flash Address to DE
Algo2=R15=V06>>10R14=V06>>8R13=V06R16=82

;Load Data to StaticRAM
Algo3={:V03=((V05>V01)?V01:V05)
Aglo4=R15=[6]R14=[7]R13=[8]R16=87R30=[V02:V03]

;Set Source Address(FFE007) to HL
Algo5=R15=[6]R14=[7]R13=[8]R16=83

;Set counter to BC
Algo6=R15=V03>>10R14=V03>>8R13=V03R16=81

; Execute LDIR instruction from FFE000
Algo7a=R15=[0]R14=[1]R13=[2]R16=87
Algo7b=RFA=01R10=(V04&7F)|01

;Check for breakpoint
Algo8=V07=0{:_1V07=V07+1\(R03&80)\(V07==800)}RFA=0
;Transfer all bytes?
Algo9=V02=V02+V03V05=V05-V03\(V05<=0)}R10=V04&87.[]=(V07==800)?0:1$

;-----------------------------------
[CONFIGURE_FLASH_EXTRAM]
;Make sure ADL= 1
Algo1=R16=08

;-----------------------------------
[ERASE_EXT_FLASH_BYDATA]
;V01= RAMStart
Algo0=V01=%X

;V02= Size of eraseSequence V06= tickcount
Algo1=V02=%XV06=%X

;erase sequence
Algo2=.[]=%X:#B0

;V03 holds start Index of loader buffer
Algo3=V03=@

;Store Erase Loader to buffers
;Address Opcode        Memmonics
; BC=retry= 7FFF
; DE= NUMBER of blocks
; IX= start addresS of block address table
; IY= flash address
;     F3                di
;                    again:
;     01DelayCount      ld bc, Delaycount
;     DD3100        	ld iy, (ix+0)
;     FD360050       	ld (iy+0), %ff
;     FD360040       	ld (iy+0), %50
;     FD360050       	ld (iy+0), %20
;     FD360040       	ld (iy+0), %D0
;                    rd_stat:
;     FD7E00         	ld a,(iy+0)
;     E6verifymask     	and a, verifymask
;     FEverifyvalue    	cp a, verifyvalue
;     28 0C          	jr z, next
;     0B         	dec bc
;     B7             	or a, a
;     21000000       	ld hl,0
;     ED42           	sbc hl,bc
;     20ED              jr nz,rd_tat 
;     1812              jr exitloop
                     next:
;     01030000          ld bc,3
;     DD09              add ix, bc
;     1B             	dec de
;     B7             	or a, a
;     21000000       	ld hl,0
;     ED52           	sbc hl,de
;     C2again          	jp nz, again
;                    exitloop
;     00                nop
;     00                nop
;     00                nop

Algo3a=[]="F301"
;DelayCounter
Algo3b=[]=V06[]=V06>>8[]=V06>>10
Algo3c=[]="DD3100"
Algo3d=V05=0{V02:[]="FD3600"[]=[V05++]}
Algo3e=[]="FD7E00E6"
;verifymask
Algo3f=[]=%2X
Algo3g=[]=FE
;verigyvalue
Algo3h=[]=%2X
Algo3i=[]="280C0BB721000000ED4220ED181201030000DD091BB721000000ED52C2"
;again
Algo3j=V05=V01+1[]=V05[]=V05>>8[]=V05>>10
Algo3k=[]="000000"

;Set Breakpoint at byte RAMStart+@
Algo4a=V05=V01+@-V03R02=V05>>10R01=V05>>8R00=V05-1
Algo4b=V04=V04|08

;Set DE= number of blocks
Algo5=R15=%2XR14=%02XR13=%02XR16=82

;Set IX= address of blockaddress table
Algo6=R15=V05>>10R14=V05>>8R13=V05R16=84

;copy block address table to buffer
Algo7=[]=%X:#B1

;Load Erase_Loader to RAM
Algo8a=R15=V01>>10R14=V01>>8R13=V01R16=87
Algo8b=R30=[V03:@-V03]

;Set PC= RAMStart
Algo9=R15=V01>>10R14=V01>>8R13=V01R16=87

;Execute erage page loader
Algo10=RFA=01R10=(V04&7F)|01

;Check for breakpoint
Algo11=V07=0{:_1V07=V07+1\(R03&80)\(V07==800)}RFA=0R16=02V05=((R11<<8)|R10).[]=(V05==0)?1:0R16=0[]=R10

;Dummy intio read needed here as a workaround for the issue where internal flash registers
;are corrupted after external erasing....
Algo12=R23=F7R24=38R25=EDR16=0V07=R10[0]=(V07==800)?0:[0]$

;-----------------------------------
[ERASE_EXT_FLASH_BYADDRESS]
;V01= RAMStart
Algo0=V01=%X

;V02= Size of eraseSequence V06= tickcount
Algo1=V02=%XV06=%X

;erase sequence
Algo2=.[]=%X:#B0

;V03 holds start Index of loader buffer
Algo3=V03=@

;Store Erase Loader to buffers
;Address Opcode        Memmonics
; BC= timeout= FFFFF
; DE= NUMBER of blocks
; IX= start addresS of block-address table
; IY= flash address
;     F3                di
;                    erase_block:
;     01DelayCount      ld bc, Delaycount   ;load timeout to bc
;
;              if 0	;erase unlock sequence
;
;     21unlockaddr      ld hl, unlockaddr
;     3Eunlockdata      ld a, unlockdata
;     77                ld (hl), a
;               endif
;
;     DD3100           	ld iy, (ix+0)      ;load block address to iy
;     3Eerasecommand   	ld a, eraseCommand ;
;     FD7700           	ld (iy+0), a       ;write erase command
;
;                    rd_stat:
;     FD7E00            ld a,(iy+0)	   ;load status to a
;     6F                ld l, a            ;save status to l tempor
;     E680              and a, verifymask  ;mask off status with ve
;     FE80              cp a, verifyvalue  ;is status== verifyvalu
;     20 05             jr nz, $F          ;if not, continue to che
;     7D                ld a, l            ;if status== verifyvalu
;     FEFF              cp a, %FF          ;is data= %ff
;     28 0C             jr z, next         ;if not, continue status
;                   $$:
;     0B                dec bc             ;decrement timeout
;     B7                or a, a            ;
;     21000000          ld hl,0
;     ED42              sbc hl,bc          ;
;     20 E7             jr nz,rd_stat      ;if timeout expired, exi
;     18 12             jr exitloop
;                    next:
;     01030000          ld bc,3            ; load next block addres
;     DD09              add ix, bc         ; 
;     1B                dec de             ; decrement block count
;     B7                or a, a            ;
;     21000000          ld hl,0            ;
;     ED52              sbc hl,de          ; erase all block ?
;     20 C9             jr nz, erase_block ; if not, erase next blo
;                     exitloop
;     00                 nop
;     00                 nop
;     00                 nop
;     00                 nop

Algo4a=[]="F301"
;DelayCounter
Algo4b=[]=V06[]=V06>>8[]=V06>>10
;Erase Sequence
Algo4c=V07=0{V02-1:[]=21[]=[V07++][]=[V07++][]=[V07++][]=3E[]=[V07++][]=77}
;Erase Command
Algo4d=[]="DD31003E"[]=[V02*4-1][]="FD7700"
Algo4e=[]="FD7E006FE6"
;verifymask
Algo4f=[]=%2X
Algo4g=[]=FE
;verigyvalue
Algo4h=[]=%2X
Algo4i=[]="20057DFEFF280C0BB721000000ED4220E7181201030000DD091BB721000000ED5220"
;write again
Algo4j=[]=C9-(V02-1)*7
Algo4k=[]="000000"

;Set Breakpoint at byte RAMStart+@
Algo5a=V05=V01+@-V03R02=V05>>10R01=V05>>8R00=V05-1
Algo5b=V04=V04|08

;Set DE= number of blocks
Algo6=R15=%2XR14=%02XR13=%02XR16=82

;Set IX= address of blockaddress table
Algo7=R15=V05>>10R14=V05>>8R13=V05R16=84

;copy block address table to buffer
Algo8=[]=%X:#B1

;Load Erase_Loader to RAM
Algo9a=R15=V01>>10R14=V01>>8R13=V01R16=87
Algo9b=R30=[V03:@-V03]

;Set PC= RAMStart
Algo10=R15=V01>>10R14=V01>>8R13=V01R16=87

;Execute erage page loader
Algo11=RFA=01R10=(V04&7F)|01

;Check for breakpoint
Algo12=V07=0{:_1V07=V07+1\(R03&80)\(V07==800)}RFA=0R16=02V05=((R11<<8)|R10).[]=(V05==0)?1:0R16=0[]=R10

;Dummy intio read needed here as a workaround for the issue where internal flash registers
;are corrupted after external erasing....
Algo13=R23=F7R24=38R25=EDR16=0V07=R10[0]=(V07==800)?0:[0]$

;-----------------------------------
[LOAD_EXTWRITE_FLASH_BYDATA_AGENT]

;write sequence
Algo1=.[]=%X:#B

;
;V01 holds start Index of loader buffer
Algo2=V01=@

;Store Erase Loader to buffers
;Address Opcode        Memmonics
; DE= number of blocks
; BC= index increment of block address table
; IX= start addresS of block address table
;0000 F3                di
;0001 1E01           	ld e,1
;0003                again:
;0003 FD360050       	ld (iy+0), %50
;0007 FD360040       	ld (iy+0), %40
;000B DD7E00        	ld a, (ix+0)
;000E FD7700            ld (iy+0), a
;0011                rd_stat:
;0011 FD7E00         	ld a,(iy+0)
;0014 E6verifymask     	and a, verifymask
;0016 28 F9          	jr z, rd_stat
;0018 FEverifyvalue    	cp a, verifyvalue
;001A 28 0A          	jr z, next
;001C 15             	dec d
;001D 7A             	ld a,d
;001E FE00           	cp a, 0
;0020 20 E1          	jr nz, again
;0022 1E00           	ld e,0
;0024 18 0E          	jr exitloop
;0026                next:
;0026 FD23           	inc iy
;0028 DD23           	inc ix
;002A 0B             	dec bc
;002B B7             	or a, a
;002C 21000000       	ld hl,0
;0030 ED42           	sbc hl,bc
;0032 20 CF          	jr nz, again1
;0033                exitloop
;0033 00                nop
;0034 00                nop
;0035 00                nop
Algo3a=[]="F31E01"
Algo3b=V02=0{V01:[]="FD3600"[]=[V02++]}
Algo3c=[]="DD7E00FD7700FD7E00E6"
;dummy verifymask
Algo3d=[]=%2X
Algo3e=[]="28F9FE"
;dummy verifyvalue
Algo3g=[]=%2X
Algo3h=[]="280A157AFE0020E11E00180EFD23DD230BB721000000ED4220CF000000FD3600FF"

;save size of flash loader to V03
Algo4=V00=@-V01

;Load Erase_Loader to RAM
Algo5i=R15=%02XR14=%02XR13=%02XR16=87
Algo5j=R30=[V01:V00].[]=V00[]=V00>>8[]=V00>>10$

;-----------------------------------
[LOAD_EXTWRITE_FLASH_BYADDRESS_AGENT]

;V03: hold number of unlock data
Algo1a=V03=%X

;address/data sequence such as (addr0,data0), (addr1, data1), ...(addrn, datan)
;least significant of addrx should be placed first in the buffer-ordering.
Algo1b=.[]=%X:#B

;
;V01 holds start Index of loader buffer
Algo2=V01=@
;dummy verifymask, not used
Algo2a=V02=%2X
;dummy verifyvalue, not used
Algo2b=V02=%2X

;Store Erase Loader to buffers
;Address Opcode        Memmonics
; BC= index increment of block address table
; IX= start addresS of block address table
; e= return status, 1= success; 0: failure
; d= retry: not used
; algorithm
; F3                    di
;              write_byte:
; 21unlockaddr          ld hl, unlockaddr
; 3Edunlockata          ld a, data
; 77               	ld (hl), a
;
; 21unlockaddr          ld hl, unlockaddr
; 3Edunlockata          ld a, data
; 77               	ld (hl), a
;
; 21unlockaddr          ld hl, unlockaddr
; 3Edunlockata          ld a, data
; 77               	ld (hl), a
;
; DD7E00                ld a,(ix+0)	; load written data to a
; FD7700                ld (iy+0), a	; write data to flash
; 
; E680                 	and a, %80	; mask off D6-D0
; 67                   	ld h, a	        ;save data bit 7 in h
; D9		        EXX		; switch to alterate register to save time to DE'
; 11FFFF0F            	ld DE, %FFFFF	;timeout count
;                rd_stat:
;			EXX		; switch back to orignal registers set
; FD7E00         	ld a,(iy+0)        ; read status
; 6F                   	ld l, a		   ; save status in l
; E680                 	and a, %80	   ; mask off D6-D0
; AC                    xor a, h	   ; D7= data, go to next
; 28 1B          	jr z, next
; CB6D                 	bit 5, l	   ; check bit 5 for program status
; 20 0F                	jr NZ, 	check_D7   ; if D5==1, check bit D7
;			EXX		   ; switch to alternate register to decrement timeout in DE
; 1B                   	dec DE		   ; D5=0, program is on-going
; B7                   	or a, a		   ; check timeout expired?
; 21000000             	ld hl, 0	   ;
; ED52                 	sbc hl, de	   ;
; 20 E7                	jr nz, rd_stat     ;if not expired, wait for completion
; 1E00                 	ld e, 0		   ;timeout expired, load e with 0 for failure
; 18 18                	jr exitloop        ; exit
;               check_D7:
; A4                  	and a, h	   ; check D7== data
; BC                    cp a, h	           ; 
; 28 04                 jr z, next	   ; program next byte if D7== data
; 1E00           	ld e,0		   ; else program fails, load e with 0 for failure
; 18 10          	jr exitloop	   ; exit
;                next:
; FD23           	inc iy		   ; increment flash address
; DD23           	inc ix		   ; increment data address
; 0B             	dec bc		   ; decrement data count
; B7             	or a, a		   ; check if all bytes programmed?
; 21000000       	ld hl,0
; ED42           	sbc hl,bc
; 20 xx         	jr nz, write_byte
; 1E01                 	ld e, 1		   ; load e with 1 for success
;                exitloop
; 00                nop
; 00                nop
; 00                nop
Algo3a=[]="F3"
Algo3b=V02=0{V03:[]=21[]=[V02++][]=[V02++][]=[V02++][]=3E[]=[V02++][]=77}
Algo3c= []="DD7E00FD7700E68067D911FFFF0FD9FD7E006FE680AC281BCB6D200FD91BB721000000ED5220E71E001818A4BC28041E001810FD23DD230BB721000000ED4220"
Algo3d=[]=BF-(V03*7)
Algo3e=[]="1E0100000000"
;save size of flash loader to V00
Algo4=V00=@-V01

;Load Erase_Loader to RAM
Algo5i=R15=%02XR14=%02XR13=%02XR16=87
Algo5j=R30=[V01:V00].[]=V00[]=V00>>8[]=V00>>10$

;----------------------------------------
[WRITE_EXT_FLASH_BLOCK_FROM_RAM]
;V01= RAMStart
Algo0a=V01=%X

;Size of loader
Algo0b=V00=%X

;Store RAMStart to buffer[0-2]
Algo0c=.[]=V01>>10[]=V01>>8[]=V01

;Store Data StartAddress to buffer[3-5]
Algo0d=V03=V01+V00[]=V03>>10[]=V03>>8[]=V03

;Store retry data to buffer [6]
Algoe=[]=%02X

;Breakpoint 
Algo1a=R02=[3]R01=[4]R00=[5]
Algo1b=V04=V04|08

;Set Data to staticRAM
Algo1c=[]=%X:#B

;V01=Size of available SRAM,   V02= Buffer startIndex
;V03=BC, transfer block size,  V05= hold remaining block size
;V06=Flash Address
Algo1d=V01=%X-V00V02=7V05=@-7V06=%X

;Set flash Address to IY
Algo2a=R15=V06>>10R14=V06>>8R13=V06R16=85

;Store breakpoint address in V06
Aglgo2b=V06=V03

;Load Data Loop
Algo3a={:
;Write to static RAM
Algo3b=V03=((V05>V01)?V01:V05)
Aglo3c=R15=[3]R14=[4]R13=[5]R16=87R30=[V02:V03]

;Set  the startAddress of data to IX
Algo3d=R15=[3]R14=[4]R13=[5]R16=84

;Set counter to BC
Algo3e=R15=V03>>10R14=V03>>8R13=V03R16=81

;Set counter to D
Algo3f=R15=0R14=[6]R13=0R16=82

; Execute Flash Loader from RAMStart
Algo3g=R15=[0]R14=[1]R13=[2]R16=87

;loops until hitting the right breakpoint (workaround for silicon bug)
Algo3g1={:
;Issue GO
Algo3g2=RFA=01R10=(V04&7F)|01
;Check for breakpoint 
Algo3g3=V00=0{:_1V00=V00+1\(R03&80)\(V00==800)}\(V00==800)
;If breakpoint hit, check if pc is at the right breakpoint repeat outer loop
Algo3g4=R16=07V07=R12<<10V07=V07|R11<<8V07=V07|R10\(V06==V07)
;end of outer loop
Algo3g5=}RFA=0

;Transfer all bytes?
Algo3j=R16=02V07=R10V02=V02+V03V05=V05-V03\((V05<=0)||(V07==0))}

Algo4=R10=V04&87R16=02V07=R10.[]=((V07==7)||(V07==800))?0:1$

;===============================================================================
;	Registers Save/Restore Utilities
;===============================================================================

[SAVE_PC_AF]
;Save PC to V07, AF to V06
Algo1= R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=R16=00V06=R10|(R11<<8)|(R12<<10)

[RESTORE_PC_AF]
;retore PC from V07, AF from V06
Algo1=R13=V07R14=V07>>8R15=V07>>10R16=87
Algo2=R13=V06R14=V06>>8R15=V06>>10R16=80

[SAVE_PC_AF_BC]
;Save PC to V07, AF to V06, BC to V05
Algo1= R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=R16=00V06=R10|(R11<<8)|(R12<<10)
Algo3=R16=01V05=R10|(R11<<8)|(R12<<10)

[RESTORE_PC_AF_BC]
;retore PC from V07, AF from V06, BC from V05
Algo1=R13=V07R14=V07>>8R15=V07>>10R16=87
Algo2=R13=V06R14=V06>>8R15=V06>>10R16=80
Algo3=R13=V05R14=V05>>8R15=V06>>10R16=81

[SAVE_PC_ADL]
;Save PC, ADL to V07
Algo1= R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=V06=(R03&10)>>4

[RESTORE_PC_ADL]
;retore PC, ADL from V07
Algo1= R13=V07R14=V07>>8R15=V07>>10R16=87
Algo2= R16=(V06 & 1)?08:09

[SET_PC_AF]
;PC
Algo=R15=%XR14=%XR13=%XR16=87
;AF
Algo1=R15=%XR14=%XR13=%XR16=80

[SET_PC_ADL]
;ADL
Algo1=R16=(%X&01)?08:09
;PC
Algo2=R15=%XR14=%XR13=%XR16=87

[SAVE_SET_PC_ADL]
;Save PC, ADL to V07
Algo1= R16=07V07=R10|(R11<<8)|(R12<<10)
Algo2=V06=(R03&10)>>4
;set ADL
Algo3=R16=(%X&01)?08:09
;set pc
Algo4=R15=%XR14=%XR13=%XR16=87

-------------------------
[FIRMWARE_VERSION]
Algo= .[]=REF[]=REE$

-------------------------
[HARDWARE_VERSION]
Algo= .[]=REC$

-------------------------
[SET_TARGET_RESET_DELAY]
Algo=.[]="00000064"REA=[0:4]

-------------------------
[SET_TARGET_COMWAIT]
Algo=.[]="00000064"REB=[0:4]


;=======================================================================================
;   DTL Configuration Information
;=======================================================================================
[GET_EMUL_CONFIG]
Algo=.#$

[SET_EVENT_ADDRESS_MASK]
;Reset Event Address and mask. Bit 6 of R03 is for RESET_PEND
Algo1=RF2=03RF3=40

;Break Event Address and Mask. Bit 7 of R03 is for ZDI_ACTIVE or break
Algo2=RF4=03RF5=80

[SET_EVENT_ACTIVATION]
Algo1=RF0=%02X

[ACTIVATE_BREAK_EVENT]
Algo1=RF0=RF0|%02

[DEACTIVATE_BREAK_EVENT]
Algo1=RF0=RF0&%FD

[ACTIVATE_RESET_EVENT]
Algo1=RF0=RF0|%01

[DEACTIVATE_RESET_EVENT]
Algo1=RF0=RF0&%FE

[ACTIVATE_TARGETRESP_EVENT]
Algo1=RF0=RF0|%08

[DEACTIVATE_TARGETRESP_EVENT]
Algo1=RF0=RF0&%F7

[GET_EVENT_ACTIVATION]
Algo1=.[]=RF0$

[SET_ZDICLOCK_VALUE]
Aglo1= RFB=%02XRFA=00

[SET_CPU_TYPE]
Algo1=RED=01RFA=00
